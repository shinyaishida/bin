#!/bin/bash
#
# @(#) Utility to search strings in files interactively.
#
# Copyright (c) 2010 Shinya Ishida. All rights reserved.
#
# Search a keyword in files located in a directory and its subdirectories.
# The search result is printed with file names and line numbers. Additional
# actions, extra search, viewing/editing a file, etc, can be applied to the
# result interactively.
#

readonly ME=$0
readonly MY_BASE=$(basename ${ME})
readonly DEFAULT_DIR=$(pwd)
readonly TMP_PREFIX="/tmp/${MY_BASE}.$$"
readonly TMP_INIT="${TMP_PREFIX}_init"
readonly TMP_CURRENT="${TMP_PREFIX}_1"
readonly TMP_PREVIOUS="${TMP_PREFIX}_2"
readonly GREP=$(which grep)
readonly IGN_CASE_FLAG='-i'
readonly HIGHLIGHT='--no-filename --color=always'

# Fixed during initalization
SEARCH_DIR="${DEFAULT_DIR}"
INIT_SEARCH_OPTS='-Inr'
CMD_MAP=
CMD_HELP=

# Mutable
IGN_CASE=${IGN_CASE_FLAG}
PATTERN=
PATTERN_HIST=()
IGN_CASE_HIST=()
INVERT_HIST=()
LAST_EPOCH=-1  # Note: can be removed after bash on MacOS migrates to ver. 4
QUICK_UNDO=

function __CleanUp() {
  rm -f ${TMP_PREFIX}* &>/dev/null
}

trap "__CleanUp" 1 2 3 15

function __PrintUsage() {
  cat <<EOF
Usage:
    ${MY_BASE} [options] <pattern>

Options:
    -c          case-sensitive search
    -d dir      search pattern(s) in the directory
    -x file     exclude file from pattern search
    -X dir      skip pattern search in the directory
    -h          print this help
    -D          debug mode

Note:
    - Binary files are ignored.
    - Multiple '-x' and '-X' options are accepted.
EOF
  __ExitWith 0
}

function __ExitWith() {
  local -r msg=${2:-unexpected error}
  __CleanUp
  case "$1" in
    0)
      exit 0;;
    *)
      echo -e "\033[31mERROR:\033[m ${msg}" 1>&2
      exit $1;;
  esac
}

function __GetFirstAvailableCommand() {
  local first=
  for c in $@; do
    which ${c} &>/dev/null && first=${c} && break
  done
  echo -n ${first}
}

function __GetHitCount() {
  local -r output=($(wc -l ${TMP_CURRENT}))
  echo ${output[0]}
}

function __PromptInput() {
  echo -en "\033[33m$1: \033[m" >&2 && read PATTERN && [ "$PATTERN" ]
}

function __SearchEntries() {
  __PromptInput "pattern"
  ((LAST_EPOCH+=1))
  PATTERN_HIST[${LAST_EPOCH}]="${PATTERN}"
  IGN_CASE_HIST[${LAST_EPOCH}]="${IGN_CASE}"
  INVERT_HIST[${LAST_EPOCH}]="$@"
  cp -pf ${TMP_CURRENT} ${TMP_PREVIOUS}
  QUICK_UNDO=yes
  ${GREP} "$@" "${IGN_CASE}" "${PATTERN}" ${TMP_PREVIOUS} > ${TMP_CURRENT}
}

function __SelectEntry() {
  local -r hit_count=$(__GetHitCount)
  [ ${hit_count} -gt 0 ] && \
    __PromptInput "number (1-${hit_count})" && \
    [[ ${PATTERN} =~ ^[1-9][0-9]*$ ]] && \
    [ ${PATTERN} -le ${hit_count} ] && \
    head -${PATTERN} ${TMP_CURRENT} | tail -1
}

function __GetCaseSensitivity() {
  [ "${IGN_CASE}" ] && echo "case-ignoring" || echo "case-sensitive"
}

function __ToggleCaseSensitivity() {
  IGN_CASE=$([ "${IGN_CASE}" ] && echo "" || echo "${IGN_CASE_FLAG}")
}

function __SetSearchDirectory() {
  SEARCH_DIR=${SEARCH_DIR:-$1}
}

function __ExcludeFiles() {
  INIT_SEARCH_OPTS=${INIT_SEARCH_OPTS}${1:+ --exclude=$1}
}

function __ExcludeDirectories() {
  INIT_SEARCH_OPTS=${INIT_SEARCH_OPTS}${1:+ --exclude-dir=${1}}
}

function __GetSearchOptions() {
  echo -n "${INVERT_HIST[$1]}" "${IGN_CASE_HIST[$1]}" "${PATTERN_HIST[$1]}"
}

function __ConductFirstSearch() {
  ${GREP} ${INIT_SEARCH_OPTS} $(__GetSearchOptions 0) ${SEARCH_DIR} \
	      > ${TMP_INIT} || __ExitWith 1 'no matches'
  cp -pf ${TMP_INIT} ${TMP_CURRENT}
}

function __RerunSearch() {
  mv -f ${TMP_CURRENT} ${TMP_PREVIOUS}
  ${GREP} $(__GetSearchOptions $1) ${TMP_PREVIOUS} > ${TMP_CURRENT}
}

function __RerunSearches() {
  local i=0
  while [ $i -le ${LAST_EPOCH} ]; do
    __RerunSearch $i
    ((i+=1))
  done
}

function __HighlightFoundPattern() {
  [ "${INVERT_HIST[${LAST_EPOCH}]}" ] && cat ${TMP_CURRENT} || \
      ${GREP} ${HIGHLIGHT} $(__GetSearchOptions ${LAST_EPOCH}) ${TMP_CURRENT}
}

case $(__GetFirstAvailableCommand more less) in
  more)
    function __PrintFoundPatterns() {
      __HighlightFoundPattern | more -NR
    };;
  less)
    function __PrintFoundPatterns() {
      __HighlightFoundPattern | less -NR
    };;
  *)
    function __PrintFoundPatterns() {
      __HighlightFoundPattern | cat -ne
    };;
esac

function __PrintSearchResult() {
  local -r count=$(__GetHitCount)
  [ ${count} -gt 0 ] && __PrintFoundPatterns
  echo -e "\033[32m${count} line(s) matched\033[m"
}

function __PrintCommandList() {
  local -r IFS=''
  (eval echo $(echo ${CMD_HELP} | tr '\n' @)) | tr @ '\n'
}


#
# Command functions
#
# To add a new command, the function must have a comment in the following
# format.  This special comment is parsed by this script itself and registered.
# '@func' is a tag to specify the function's name.  '@key' is a tag to indicate
# an alphabetical letter assigned to call the function via the prompt.  '@desc'
# is a tag for a brief description of the function.  This description is
# printed in the command help.  The note may contain scripts; i.e., variables,
# ${VAR}, and command/function calls, $(command...).  Instead, to print letters
# and strings, which have a special meaning for bash script, as they are, they
# must be quoted with single quotation, like '(' and ')'.
#
# Format:
# # @func FUNCTION_NAME
# # @key K
# # @desc A BRIEF DESCRIPTION OF THE FUNCTION IN A LINE
#
# Note:
# - All tags are required, in the order above, for a function to register.
# - Only a tag can be in a line.
# - A tag line must start with '#'.
# - Only spaces, ' ', may be between the '#' and a tag.

# @func PrintSearchResult
# @key p
# @desc print search result
function PrintSearchResult() {
  __PrintSearchResult
}

# @func SearchEntriesContainingPattern
# @key m
# @desc get lines containing substring matching a specified pattern
function SearchEntriesContainingPattern() {
  __SearchEntries
  __PrintSearchResult
}

# @func SearchEntriesNotContainingPattern
# @key n
# @desc get lines not containing substring matching a specified pattern
function SearchEntriesNotContainingPattern() {
  __SearchEntries -v
  __PrintSearchResult
}

# @func UndoSearch
# @key u
# @desc undo last search
function UndoSearch() {
  [ ${LAST_EPOCH} -gt 0 ] && {
    unset INVERT_HIST[${LAST_EPOCH}]
    unset IGN_CASE_HIST[${LAST_EPOCH}]
    unset PATTERN_HIST[${LAST_EPOCH}]
    ((LAST_EPOCH-=1))
    [ "${QUICK_UNDO-}" ] && {
      [ -f ${TMP_PREVIOUS} ] && cp -pf ${TMP_PREVIOUS} ${TMP_CURRENT}
      QUICK_UNDO=
    } || {
      cp -pf ${TMP_INIT} ${TMP_CURRENT}
      __RerunSearches
    }
  }
  __PrintSearchResult
}

# @func RefreshSearch
# @key r
# @desc refresh search result
function RefreshSearch() {
  __ConductFirstSearch && __RerunSearches
  __PrintSearchResult
}

# @func ViewInFile
# @key v
# @desc view a line with file viewer '('${viewer-not available}')'
readonly viewer=$(__GetFirstAvailableCommand less more)
case ${viewer} in
  less)
    function ViewInFile() {
      read file_name line_num rest < <(__SelectEntry | tr ':' ' ') && \
	    cat -n ${file_name} | less +${line_num}
    };;
  more)
    function ViewInFile() {
      read file_name line_num rest < <(__SelectEntry | tr ':' ' ') && \
	    cat -n ${file_name} | more +${line_num}
    };;
  *)
    function ViewInFile() {
      local -r range=10
      read file_name line_num rest < <(__SelectEntry | tr ':' ' ') && \
	    cat -n ${file_name} | \
	      head -$((${line_num} + ${range})) | \
	      tail -$((${range} * 2 + 1))
    };;
esac

# @func EditFile
# @key e
# @desc edit a line with text editor '('${editor-not available}')'
readonly editor=$(__GetFirstAvailableCommand vi vim)
case ${editor} in
  vi|vim)
    function EditFile() {
      read file_name line_num rest < <(__SelectEntry | tr ':' ' ') && \
	    ${editor} +${line_num} ${file_name}
    };;
  *)
    function EditFile() {
      echo "cannot use this function in your environment"
    };;
esac

# @func ListFileNames
# @key l
# @desc list file names hit in current search
function ListFileNames() {
  cut -d : -f 1 ${TMP_CURRENT} | sort -u
}

# @func SaveSearchResult
# @key s
# @desc save current result in a file '('overwritten')'
function SaveSearchResult() {
  __PromptInput "file" && cp -pf ${TMP_CURRENT} ${PATTERN}
}
readonly SaveSearchResult

# @func ToggleCaseSensitivity
# @key c
# @desc toggle case-sensitivity of search '('$(__GetCaseSensitivity) now')'
function ToggleCaseSensitivity() {
  __ToggleCaseSensitivity && __GetCaseSensitivity
}

# @func ShowHelp
# @key h
# @desc show this help
function ShowHelp() {
  __PrintCommandList
}

# @func Quit
# @key q
# @desc quit search
function Quit() {
  __ExitWith 0
}

#
# Sub-routines
#

function __BuildCommandLists() {
  # Note: Using associative arrays seems a better choice to implement this
  # function.  However, it is supported from bash version 4.  The MacOS's
  # default bash (/bin/bash) is version 3.
  local cmd_docs=$(${GREP} '^# *@' ${ME} | tr '\n' ' ')
  cmd_docs=${cmd_docs//'# '/}
  local IFS=$'\n'
  cmd_docs=(${cmd_docs//@func /$'\n'})
  IFS=' '
  local i=0
  while [ $i -lt ${#cmd_docs[@]} ]; do
    read func_name at_key k at_desc desc < <(echo ${cmd_docs[$i]})
    [ "${func_name}" -a "${desc}" ] && \
      [ "${at_key}" = "@key" -a "${at_desc}" = "@desc" ] && \
      [[ "${k}" =~ ^[a-z]$ ]] && {
	    CMD_MAP="${CMD_MAP+${CMD_MAP}$'\n'}${k} ${func_name}"
	    CMD_HELP="${CMD_HELP+${CMD_HELP}$'\n'}  ${k}: ${desc}"
      }
    ((i+=1))
  done
  readonly CMD_MAP=${CMD_MAP}
  readonly CMD_HELP=${CMD_HELP}
}

function __GetCommandFunction() {
  local IFS=''
  ${GREP} "^${PATTERN}" <<< ${CMD_MAP} | cut -d ' ' -f 2
}

function __ExecuteCommand() {
  __PromptInput "command" && {
    local -r cmd_func=$(__GetCommandFunction)
    [ "${cmd_func}" ] && ${cmd_func} || __PrintCommandList
  }
}

function __SearchInteractively() {
  while [ x = x ]; do
    __ExecuteCommand
  done
}

function __EnableDebugMode() {
  set -x
}

##
## Main routine
##

__BuildCommandLists || __ExitWith 2 'failed in initialization'
while getopts "cd:x:X:hD" flag; do
  case $flag in
    c)
      __ToggleCaseSensitivity;;
    d)
      __SetSearchDirectory $OPTARG;;
    x)
      __ExcludeFiles $OPTARG;;
    X)
      __ExcludeDirectories $OPTARG;;
    D)
      __EnableDebugMode;;
    h)
      __PrintUsage;;
    *)
      __ExitWith 5 "see help by '-h' option";;
  esac
done
shift $(($OPTIND - 1))
PATTERN_HIST[0]="$1"
IGN_CASE_HIST[0]="${IGN_CASE}"
INVERT_HIST[0]=""
[ -d ${SEARCH_DIR} ] || __ExitWith 3 "directory '${SEARCH_DIR}' not found"
[ "${PATTERN_HIST[0]}" ] || __ExitWith 4 'pattern not specified'
((LAST_EPOCH+=1))
__ConductFirstSearch && {
  __PrintSearchResult
  __SearchInteractively
}
